<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="bab969b8-4747-4daf-a09e-569b1928619b" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
    </list>
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FavoritesManager">
    <favorites_list name="recipe-note" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/categories/views.py">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="342">
              <caret line="18" lean-forward="true" selection-start-line="18" selection-end-line="18" />
              <folding>
                <element signature="e#0#35#0" expanded="true" />
              </folding>
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/categories/models.py">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="285">
              <caret line="15" selection-start-line="15" selection-end-line="15" />
              <folding>
                <element signature="e#0#28#0" expanded="true" />
              </folding>
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/categories/serializers.py">
          <provider selected="true" editor-type-id="text-editor">
            <state>
              <folding>
                <element signature="e#0#38#0" expanded="true" />
              </folding>
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Python Script" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="feature/CATEGORY_API" />
      </map>
    </option>
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/README.md" />
        <option value="$PROJECT_DIR$/.gitignore" />
        <option value="$PROJECT_DIR$/tools/models.py" />
        <option value="$PROJECT_DIR$/tools/admin.py" />
        <option value="$PROJECT_DIR$/tools/serializers.py" />
        <option value="$PROJECT_DIR$/tools/urls.py" />
        <option value="$PROJECT_DIR$/tools/views.py" />
        <option value="$PROJECT_DIR$/ingredients/models.py" />
        <option value="$PROJECT_DIR$/ingredients/admin.py" />
        <option value="$PROJECT_DIR$/ingredients/serializers.py" />
        <option value="$PROJECT_DIR$/ingredients/views.py" />
        <option value="$PROJECT_DIR$/ingredients/urls.py" />
        <option value="$PROJECT_DIR$/config/settings.py" />
        <option value="$PROJECT_DIR$/categories/admin.py" />
        <option value="$PROJECT_DIR$/config/urls.py" />
        <option value="$PROJECT_DIR$/categories/urls.py" />
        <option value="$PROJECT_DIR$/categories/serializers.py" />
        <option value="$PROJECT_DIR$/categories/views.py" />
        <option value="$PROJECT_DIR$/categories/models.py" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="-8" />
    <option name="y" value="-8" />
    <option name="width" value="1936" />
    <option name="height" value="1056" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="Scope" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="recipe-note" type="b2602c69:ProjectViewProjectNode" />
              <item name="recipe-note" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
  </component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\Users\gurumee\PycharmProjects\recipe-note\categories" />
      <recent name="C:\Users\gurumee\PycharmProjects\recipe-note\ingredients" />
    </key>
  </component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="bab969b8-4747-4daf-a09e-569b1928619b" name="Default Changelist" comment="" />
      <created>1552314190128</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1552314190128</updated>
    </task>
    <task id="LOCAL-00001" summary="master first init&#10;&#10;django 프레임워크로 프로젝트 툴만 만듬&#10;&#10;친 명령어 : &#10;django startproject config .">
      <created>1552315856298</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1552315856298</updated>
    </task>
    <task id="LOCAL-00002" summary="master first init&#10;&#10;django 프레임워크로 프로젝트 툴만 만듬&#10;&#10;친 명령어 : &#10;django startproject config .">
      <created>1552315897019</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1552315897019</updated>
    </task>
    <task id="LOCAL-00003" summary="feature/TOOL_API #1 startapp tools&#10;&#10;1. python manage.py startapp tools&#10;2. tools/models.py&#10;class Tool(models.Model):&#10;    name = models.CharField(max_length=200)&#10;&#10;    def __str__(self):&#10;        return self.name &#10;3. settings.py&#10;INSTALLED_APP = [&#10;    # ...&#10;    'tools',&#10;]&#10;4. python manage.py createsuperuser&#10;gurumee92@hong.com&#10;hong0730">
      <created>1552488501544</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1552488501544</updated>
    </task>
    <task id="LOCAL-00004" summary="feature/TOOL_API #2 make model and admin apply&#10;&#10;1. models.py Tool(name) -&gt; Tools(name (unique)) 변경&#10;2. admin.py 적용 &#10;&#10;class ToolsAdmin(admin.ModelAdmin):&#10;    list_display = ['id', 'name']&#10;    list_editable = ['name']&#10;&#10;&#10;admin.site.register(Tools, ToolsAdmin)&#10;&#10;====배운 명령어&#10;&#10;//db migrate&#10;python manage.py makemigrations tools &#10;python manage.py migrate tools">
      <created>1552575568640</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1552575568640</updated>
    </task>
    <task id="LOCAL-00005" summary="feature/TOOL_API #3 django-rest-framework 적용&#10;&#10;1. install djangorestframework&#10;    - 1. pip install djangorestframework&#10;    - 2. config/settings.py &#10;        &#10;          INSTALLED_APPS = [ &#10;              ..., &#10;              &quot;rest_framework&quot;,&#10;              ...&#10;          ]&#10;&#10;2. tools/serializers.py 생성&#10;    - 1. ToolsSerializer 생성 ModelSerializer 상속 받으면 모델을 쉽게 JSON화 하기 위한 Serializer가 쉽게 만들어진다.&#10;&#10;3. tools/views.py 수정&#10;    - 1. 도구 목록에 대한 API 제공 ToolList(generic.ListCreateAPIView)&#10;    - 2. 도구 하나에 대한 API 제공 Tool(generic.RetrieveUpdateDestroyAPIView)&#10;&#10;4. tools/urls.py 생성&#10;&#10;from django.urls import path&#10;from rest_framework.urlpatterns import format_suffix_patterns&#10;&#10;from .views import *&#10;&#10;urlpatterns = [&#10;    path('tools/', ToolList.as_view()),&#10;    path('tools/&lt;int:pk&gt;/', ToolsDetail.as_view())&#10;]&#10;&#10;5. config/urls.py&#10;&#10;urlpatterns = [&#10;    ...,&#10;    path(&quot;api/&quot;, include(&quot;tools.urls&quot;))&#10;]">
      <created>1552577598360</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1552577598360</updated>
    </task>
    <task id="LOCAL-00006" summary="feature/TOOL_API #4 django-rest-swagger 적용&#10;&#10;1. install django-rest-swagger&#10;    - 1. pip install django-rest-swagger&#10;    - 2. config/settings.py &#10;        &#10;          INSTALLED_APPS = [ &#10;              ..., &#10;              &quot;rest_framework_swagger&quot;&#10;              ...&#10;          ]&#10;&#10;2. config/urls.py&#10;&#10;#...&#10;from rest_framework_swagger.views import get_swagger_view&#10;&#10;urlpatterns = [&#10;    # ...&#10;    path(&quot;api/doc&quot;, get_swagger_view(title=&quot;Recipe Note API Manual&quot;))&#10;]&#10;&#10;와 개 쉽다... 이러면 swagger-ui 적용되있는 페이지 나옴...">
      <created>1552578113644</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1552578113644</updated>
    </task>
    <task id="LOCAL-00007" summary="feature/INGREDIENTS_API #1 앱 세팅&#10;&#10;1. app 생성&#10;&#10;python manage.py startapp ingredients&#10;&#10;2. config/settings.py 수정&#10;&#10;INSTALLED_APPS = [&#10;    ...&#10;    tools,&#10;    ingredients&#10;]">
      <created>1552831865010</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1552831865010</updated>
    </task>
    <task id="LOCAL-00008" summary="feature/INGREDIENTS_API #2 모델 클래스 생성&#10;&#10;1. 모델 클래스 생성&#10;&#10;- ingredients/models.py &#10;&#10;    from django.db import models&#10;&#10;    class Ingredients(models.Model):&#10;        name = models.CharField(max_length=200, unique=True)&#10;    &#10;        def __str__(self):&#10;            return self.name&#10;&#10;2. ORM 마이그레이션&#10;&#10;$ python manage.py makemigrations ingredients&#10;$ python manage.py migrate ingredients">
      <created>1552832430016</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1552832430016</updated>
    </task>
    <task id="LOCAL-00009" summary="feature/INGREDIENTS_API #3 관리자 페이지 등록하기&#10;&#10;1. IngredientsAdmin 생성&#10;&#10;- ingredients/admin.py &#10;&#10;    from django.contrib import admin&#10;    from .models import Ingredients&#10;    &#10;    class IngredientsAdmin(admin.ModelAdmin):&#10;        list_display = ['id', 'name']&#10;        list_editable = ['name']&#10;    &#10;    admin.site.register(Ingredients, IngredientsAdmin)">
      <created>1552833152965</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1552833152965</updated>
    </task>
    <task id="LOCAL-00010" summary="feature/INGREDIENTS_API #4 Serializer 클래스 생성하기&#10;&#10;1. IngredientsSerializer 생성&#10;&#10;모델 클래스를 API 형태로 보여주는 Serializer 클래스 생성&#10;&#10;- ingredients/serializers.py&#10;    from .models import Ingredients&#10;    from rest_framework import serializers&#10;    &#10;    &#10;    class IngredientsSerializer(serializers.ModelSerializer):&#10;        class Meta:&#10;            model = Ingredients&#10;            fields = '__all__'">
      <created>1552833800669</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1552833800669</updated>
    </task>
    <task id="LOCAL-00011" summary="feature/CATEGORY_API #1 카테고리 앱 생성&#10;&#10;1. python manage.py startapp categories&#10;- 그로 인해 생긴 코드들.">
      <created>1553393132914</created>
      <option name="number" value="00011" />
      <option name="presentableId" value="LOCAL-00011" />
      <option name="project" value="LOCAL" />
      <updated>1553393132914</updated>
    </task>
    <task id="LOCAL-00012" summary="feature/CATEGORY_API #2 카테고리 모델 생성 및 어드민 연결&#10;&#10;1. categories/models.py 카테고리 모델 생성(유저는 연결x)&#10;&#10;    from django.db import models&#10;    &#10;    &#10;    # Create your models here.&#10;    from django.utils.datetime_safe import datetime&#10;    &#10;    &#10;    class Category(models.Model):&#10;        name = models.CharField(max_length=200)&#10;        created_at = models.DateTimeField(default=datetime.now())&#10;        is_deleted = models.BooleanField(default=False)&#10;        owner = models.CharField(max_length=200, unique=True)  # 추후 user 로 변경&#10;    &#10;        def __str__(self):&#10;            return &quot;name: %s, created_at: %s. owner: %s&quot; % (self.name, self.created_at, self.owner)&#10;&#10;2. categories/admin.py 어드민 연결. 추후 어드민 커스터마이징 필요&#10;    &#10;    from django.contrib import admin&#10;    &#10;    # Register your models here.&#10;    from .models import Category&#10;    &#10;    &#10;    class CategoriesAdmin(admin.ModelAdmin):&#10;        list_display = ['id', 'name', 'created_at', 'is_deleted', 'owner']&#10;        list_editable = ['name', 'is_deleted']&#10;    &#10;    &#10;    admin.site.register(Category, CategoriesAdmin)&#10;    &#10;3. config/settings.py 프로젝트 연결&#10;&#10;    INSTALLED_APPS = [&#10;        # ...,&#10;        'categories'&#10;    ]&#10;    &#10;4. 모델 마이그레이션&#10;&#10;     python manage.py makemigrations&#10;     python manage.py migrate">
      <created>1553394583602</created>
      <option name="number" value="00012" />
      <option name="presentableId" value="LOCAL-00012" />
      <option name="project" value="LOCAL" />
      <updated>1553394583602</updated>
    </task>
    <task id="LOCAL-00013" summary="feature/CATEGORY_API #3 Serializers 및 View 만들기&#10;&#10;1. categories/serializers.py API 에서 모델을 JSON 직렬화시키는 CategorySerializer 생성 &#10;&#10;    from rest_framework import serializers&#10;    &#10;    from .models import Category&#10;    &#10;    &#10;    class CategorySerializer(serializers.ModelSerializer):&#10;        class Meta:&#10;            model = Category&#10;            fields = '__all__'&#10;&#10;2. categories/views.py API 결과를 반환해주는 View 클래스들 생성(generic 이용)&#10;&#10;    from rest_framework import generics&#10;    &#10;    # Create your views here.&#10;    from .models import Category&#10;    from .serializers import CategorySerializer&#10;    &#10;    &#10;    class CategoryList(generics.ListCreateAPIView):&#10;        queryset = Category.objects.all()&#10;        serializer_class = CategorySerializer&#10;    &#10;    &#10;    class CategoryListByOwner(generics.ListAPIView):&#10;        serializer_class = CategorySerializer&#10;    &#10;        def get_queryset(self):&#10;            owner = self.kwargs['owner']&#10;            return Category.objects.filter(owner=owner, is_deleted=False).order_by('-created_at')&#10;    &#10;    &#10;    class CategoryDetail(generics.RetrieveUpdateDestroyAPIView):&#10;        queryset = Category.objects.all()&#10;        serializer_class = CategorySerializer&#10;&#10;3. categories/urls.py url 연결&#10;&#10;    from django.urls import path&#10;    from rest_framework.urlpatterns import format_suffix_patterns&#10;    &#10;    from .views import *&#10;    &#10;    urlpatterns = [&#10;        path('categories/', CategoryList.as_view()),                     # 카테고리 전체 목록, 1개 생성 &#10;        path('categories/&lt;slug:owner&gt;', CategoryListByOwner.as_view()),  # owner 의 카테고리 목록&#10;        path('categories/&lt;int:pk&gt;/', CategoryDetail.as_view())           # id 로 get, put, patch, delete 지원&#10;    ]&#10;    &#10;4. conf/urls.py 앱에서 연결된 뷰들을 전체 프로젝트에 연결&#10;&#10;urlpatterns = [&#10;    # ...,&#10;    path('api/', include('categories.urls')),&#10;    # ...&#10;]&#10;&#10;* categories/models.py 수정 owner 유니크 설정 제거...">
      <created>1553398285154</created>
      <option name="number" value="00013" />
      <option name="presentableId" value="LOCAL-00013" />
      <option name="project" value="LOCAL" />
      <updated>1553398285154</updated>
    </task>
    <option name="localTasksCounter" value="14" />
    <servers />
  </component>
  <component name="TodoView">
    <todo-panel id="selected-file">
      <is-autoscroll-to-source value="true" />
    </todo-panel>
    <todo-panel id="all">
      <are-packages-shown value="true" />
      <is-autoscroll-to-source value="true" />
    </todo-panel>
  </component>
  <component name="ToolWindowManager">
    <frame x="-8" y="-8" width="1936" height="1056" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info id="Favorites" order="0" sideWeight="0.5005599" side_tool="true" weight="0.25" />
      <window_info active="true" content_ui="combo" id="Project" order="1" sideWeight="0.4994401" visible="true" weight="0.26652452" />
      <window_info id="Structure" order="2" side_tool="true" weight="0.25" />
      <window_info anchor="bottom" id="Messages" order="0" />
      <window_info anchor="bottom" id="Terminal" order="1" sideWeight="0.49840087" visible="true" weight="0.3286334" />
      <window_info anchor="bottom" id="Event Log" order="2" sideWeight="0.50159913" side_tool="true" weight="0.3286334" />
      <window_info anchor="bottom" id="Python Console" order="3" weight="0.32922733" />
      <window_info anchor="bottom" id="Message" order="4" />
      <window_info anchor="bottom" id="Find" order="5" />
      <window_info anchor="bottom" id="Version Control" order="6" weight="0.3295964" />
      <window_info anchor="bottom" id="Run" order="7" />
      <window_info anchor="bottom" id="Debug" order="8" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="9" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="10" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="11" weight="0.32922733" />
      <window_info anchor="right" id="R Graphics" order="0" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="1" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="R Packages" order="2" />
      <window_info anchor="right" id="Ant Build" order="3" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="4" weight="0.25" />
    </layout>
    <layout-to-restore>
      <window_info id="Favorites" order="0" sideWeight="0.5005599" side_tool="true" weight="0.25" />
      <window_info content_ui="combo" id="Project" order="1" sideWeight="0.4994401" visible="true" weight="0.54704595" />
      <window_info id="Structure" order="2" side_tool="true" weight="0.25" />
      <window_info anchor="bottom" id="Messages" order="0" />
      <window_info anchor="bottom" id="Terminal" order="1" sideWeight="0.49840087" weight="0.33187294" />
      <window_info anchor="bottom" id="Event Log" order="2" sideWeight="0.50159913" side_tool="true" weight="0.3286334" />
      <window_info anchor="bottom" id="Python Console" order="3" weight="0.32922733" />
      <window_info anchor="bottom" id="Message" order="4" />
      <window_info anchor="bottom" id="Find" order="5" />
      <window_info anchor="bottom" id="Version Control" order="6" weight="0.3295964" />
      <window_info anchor="bottom" id="Run" order="7" />
      <window_info anchor="bottom" id="Debug" order="8" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="9" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="10" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="11" weight="0.32922733" />
      <window_info anchor="right" id="R Graphics" order="0" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="1" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="R Packages" order="2" />
      <window_info anchor="right" id="Ant Build" order="3" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="4" weight="0.25" />
    </layout-to-restore>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="master first init&#10;&#10;django 프레임워크로 프로젝트 툴만 만듬&#10;&#10;친 명령어 : &#10;django startproject config ." />
    <MESSAGE value="feature/TOOL_API #1 startapp tools&#10;&#10;1. python manage.py startapp tools&#10;2. tools/models.py&#10;class Tool(models.Model):&#10;    name = models.CharField(max_length=200)&#10;&#10;    def __str__(self):&#10;        return self.name &#10;3. settings.py&#10;INSTALLED_APP = [&#10;    # ...&#10;    'tools',&#10;]&#10;4. python manage.py createsuperuser&#10;gurumee92@hong.com&#10;hong0730" />
    <MESSAGE value="feature/TOOL_API #2 make model and admin apply&#10;&#10;1. models.py Tool(name) -&gt; Tools(name (unique)) 변경&#10;2. admin.py 적용 &#10;&#10;class ToolsAdmin(admin.ModelAdmin):&#10;    list_display = ['id', 'name']&#10;    list_editable = ['name']&#10;&#10;&#10;admin.site.register(Tools, ToolsAdmin)&#10;&#10;====배운 명령어&#10;&#10;//db migrate&#10;python manage.py makemigrations tools &#10;python manage.py migrate tools" />
    <MESSAGE value="feature/TOOL_API #3 django-rest-framework 적용&#10;&#10;1. install djangorestframework&#10;    - 1. pip install djangorestframework&#10;    - 2. config/settings.py &#10;        &#10;          INSTALLED_APPS = [ &#10;              ..., &#10;              &quot;rest_framework&quot;,&#10;              ...&#10;          ]&#10;&#10;2. tools/serializers.py 생성&#10;    - 1. ToolsSerializer 생성 ModelSerializer 상속 받으면 모델을 쉽게 JSON화 하기 위한 Serializer가 쉽게 만들어진다.&#10;&#10;3. tools/views.py 수정&#10;    - 1. 도구 목록에 대한 API 제공 ToolList(generic.ListCreateAPIView)&#10;    - 2. 도구 하나에 대한 API 제공 Tool(generic.RetrieveUpdateDestroyAPIView)&#10;&#10;4. tools/urls.py 생성&#10;&#10;from django.urls import path&#10;from rest_framework.urlpatterns import format_suffix_patterns&#10;&#10;from .views import *&#10;&#10;urlpatterns = [&#10;    path('tools/', ToolList.as_view()),&#10;    path('tools/&lt;int:pk&gt;/', ToolsDetail.as_view())&#10;]&#10;&#10;5. config/urls.py&#10;&#10;urlpatterns = [&#10;    ...,&#10;    path(&quot;api/&quot;, include(&quot;tools.urls&quot;))&#10;]" />
    <MESSAGE value="feature/TOOL_API #4 django-rest-swagger 적용&#10;&#10;1. install django-rest-swagger&#10;    - 1. pip install django-rest-swagger&#10;    - 2. config/settings.py &#10;        &#10;          INSTALLED_APPS = [ &#10;              ..., &#10;              &quot;rest_framework_swagger&quot;&#10;              ...&#10;          ]&#10;&#10;2. config/urls.py&#10;&#10;#...&#10;from rest_framework_swagger.views import get_swagger_view&#10;&#10;urlpatterns = [&#10;    # ...&#10;    path(&quot;api/doc&quot;, get_swagger_view(title=&quot;Recipe Note API Manual&quot;))&#10;]&#10;&#10;와 개 쉽다... 이러면 swagger-ui 적용되있는 페이지 나옴..." />
    <MESSAGE value="feature/INGREDIENTS_API #1 앱 세팅&#10;&#10;1. app 생성&#10;&#10;python manage.py startapp ingredients&#10;&#10;2. config/settings.py 수정&#10;&#10;INSTALLED_APPS = [&#10;    ...&#10;    tools,&#10;    ingredients&#10;]" />
    <MESSAGE value="feature/INGREDIENTS_API #2 모델 클래스 생성&#10;&#10;1. 모델 클래스 생성&#10;&#10;- ingredients/models.py &#10;&#10;    from django.db import models&#10;&#10;    class Ingredients(models.Model):&#10;        name = models.CharField(max_length=200, unique=True)&#10;    &#10;        def __str__(self):&#10;            return self.name&#10;&#10;2. ORM 마이그레이션&#10;&#10;$ python manage.py makemigrations ingredients&#10;$ python manage.py migrate ingredients" />
    <MESSAGE value="feature/INGREDIENTS_API #3 관리자 페이지 등록하기&#10;&#10;1. IngredientsAdmin 생성&#10;&#10;- ingredients/admin.py &#10;&#10;    from django.contrib import admin&#10;    from .models import Ingredients&#10;    &#10;    class IngredientsAdmin(admin.ModelAdmin):&#10;        list_display = ['id', 'name']&#10;        list_editable = ['name']&#10;    &#10;    admin.site.register(Ingredients, IngredientsAdmin)" />
    <MESSAGE value="feature/INGREDIENTS_API #4 Serializer 클래스 생성하기&#10;&#10;1. IngredientsSerializer 생성&#10;&#10;모델 클래스를 API 형태로 보여주는 Serializer 클래스 생성&#10;&#10;- ingredients/serializers.py&#10;    from .models import Ingredients&#10;    from rest_framework import serializers&#10;    &#10;    &#10;    class IngredientsSerializer(serializers.ModelSerializer):&#10;        class Meta:&#10;            model = Ingredients&#10;            fields = '__all__'" />
    <MESSAGE value="feature/CATEGORY_API #1 카테고리 앱 생성&#10;&#10;1. python manage.py startapp categories&#10;- 그로 인해 생긴 코드들." />
    <MESSAGE value="feature/CATEGORY_API #2 카테고리 모델 생성 및 어드민 연결&#10;&#10;1. categories/models.py 카테고리 모델 생성(유저는 연결x)&#10;&#10;    from django.db import models&#10;    &#10;    &#10;    # Create your models here.&#10;    from django.utils.datetime_safe import datetime&#10;    &#10;    &#10;    class Category(models.Model):&#10;        name = models.CharField(max_length=200)&#10;        created_at = models.DateTimeField(default=datetime.now())&#10;        is_deleted = models.BooleanField(default=False)&#10;        owner = models.CharField(max_length=200, unique=True)  # 추후 user 로 변경&#10;    &#10;        def __str__(self):&#10;            return &quot;name: %s, created_at: %s. owner: %s&quot; % (self.name, self.created_at, self.owner)&#10;&#10;2. categories/admin.py 어드민 연결. 추후 어드민 커스터마이징 필요&#10;    &#10;    from django.contrib import admin&#10;    &#10;    # Register your models here.&#10;    from .models import Category&#10;    &#10;    &#10;    class CategoriesAdmin(admin.ModelAdmin):&#10;        list_display = ['id', 'name', 'created_at', 'is_deleted', 'owner']&#10;        list_editable = ['name', 'is_deleted']&#10;    &#10;    &#10;    admin.site.register(Category, CategoriesAdmin)&#10;    &#10;3. config/settings.py 프로젝트 연결&#10;&#10;    INSTALLED_APPS = [&#10;        # ...,&#10;        'categories'&#10;    ]&#10;    &#10;4. 모델 마이그레이션&#10;&#10;     python manage.py makemigrations&#10;     python manage.py migrate" />
    <MESSAGE value="feature/CATEGORY_API #3 Serializers 및 View 만들기&#10;&#10;1. categories/serializers.py API 에서 모델을 JSON 직렬화시키는 CategorySerializer 생성 &#10;&#10;    from rest_framework import serializers&#10;    &#10;    from .models import Category&#10;    &#10;    &#10;    class CategorySerializer(serializers.ModelSerializer):&#10;        class Meta:&#10;            model = Category&#10;            fields = '__all__'&#10;&#10;2. categories/views.py API 결과를 반환해주는 View 클래스들 생성(generic 이용)&#10;&#10;    from rest_framework import generics&#10;    &#10;    # Create your views here.&#10;    from .models import Category&#10;    from .serializers import CategorySerializer&#10;    &#10;    &#10;    class CategoryList(generics.ListCreateAPIView):&#10;        queryset = Category.objects.all()&#10;        serializer_class = CategorySerializer&#10;    &#10;    &#10;    class CategoryListByOwner(generics.ListAPIView):&#10;        serializer_class = CategorySerializer&#10;    &#10;        def get_queryset(self):&#10;            owner = self.kwargs['owner']&#10;            return Category.objects.filter(owner=owner, is_deleted=False).order_by('-created_at')&#10;    &#10;    &#10;    class CategoryDetail(generics.RetrieveUpdateDestroyAPIView):&#10;        queryset = Category.objects.all()&#10;        serializer_class = CategorySerializer&#10;&#10;3. categories/urls.py url 연결&#10;&#10;    from django.urls import path&#10;    from rest_framework.urlpatterns import format_suffix_patterns&#10;    &#10;    from .views import *&#10;    &#10;    urlpatterns = [&#10;        path('categories/', CategoryList.as_view()),                     # 카테고리 전체 목록, 1개 생성 &#10;        path('categories/&lt;slug:owner&gt;', CategoryListByOwner.as_view()),  # owner 의 카테고리 목록&#10;        path('categories/&lt;int:pk&gt;/', CategoryDetail.as_view())           # id 로 get, put, patch, delete 지원&#10;    ]&#10;    &#10;4. conf/urls.py 앱에서 연결된 뷰들을 전체 프로젝트에 연결&#10;&#10;urlpatterns = [&#10;    # ...,&#10;    path('api/', include('categories.urls')),&#10;    # ...&#10;]&#10;&#10;* categories/models.py 수정 owner 유니크 설정 제거..." />
    <option name="LAST_COMMIT_MESSAGE" value="feature/CATEGORY_API #3 Serializers 및 View 만들기&#10;&#10;1. categories/serializers.py API 에서 모델을 JSON 직렬화시키는 CategorySerializer 생성 &#10;&#10;    from rest_framework import serializers&#10;    &#10;    from .models import Category&#10;    &#10;    &#10;    class CategorySerializer(serializers.ModelSerializer):&#10;        class Meta:&#10;            model = Category&#10;            fields = '__all__'&#10;&#10;2. categories/views.py API 결과를 반환해주는 View 클래스들 생성(generic 이용)&#10;&#10;    from rest_framework import generics&#10;    &#10;    # Create your views here.&#10;    from .models import Category&#10;    from .serializers import CategorySerializer&#10;    &#10;    &#10;    class CategoryList(generics.ListCreateAPIView):&#10;        queryset = Category.objects.all()&#10;        serializer_class = CategorySerializer&#10;    &#10;    &#10;    class CategoryListByOwner(generics.ListAPIView):&#10;        serializer_class = CategorySerializer&#10;    &#10;        def get_queryset(self):&#10;            owner = self.kwargs['owner']&#10;            return Category.objects.filter(owner=owner, is_deleted=False).order_by('-created_at')&#10;    &#10;    &#10;    class CategoryDetail(generics.RetrieveUpdateDestroyAPIView):&#10;        queryset = Category.objects.all()&#10;        serializer_class = CategorySerializer&#10;&#10;3. categories/urls.py url 연결&#10;&#10;    from django.urls import path&#10;    from rest_framework.urlpatterns import format_suffix_patterns&#10;    &#10;    from .views import *&#10;    &#10;    urlpatterns = [&#10;        path('categories/', CategoryList.as_view()),                     # 카테고리 전체 목록, 1개 생성 &#10;        path('categories/&lt;slug:owner&gt;', CategoryListByOwner.as_view()),  # owner 의 카테고리 목록&#10;        path('categories/&lt;int:pk&gt;/', CategoryDetail.as_view())           # id 로 get, put, patch, delete 지원&#10;    ]&#10;    &#10;4. conf/urls.py 앱에서 연결된 뷰들을 전체 프로젝트에 연결&#10;&#10;urlpatterns = [&#10;    # ...,&#10;    path('api/', include('categories.urls')),&#10;    # ...&#10;]&#10;&#10;* categories/models.py 수정 owner 유니크 설정 제거..." />
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/manage.py">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/.gitignore">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="133">
          <caret line="7" column="5" lean-forward="true" selection-start-line="7" selection-start-column="5" selection-end-line="7" selection-end-column="5" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/README.md">
      <provider selected="true" editor-type-id="split-provider[text-editor;markdown-preview-editor]">
        <state split_layout="SPLIT">
          <first_editor relative-caret-position="627">
            <caret line="33" column="6" selection-start-line="33" selection-start-column="6" selection-end-line="33" selection-end-column="6" />
          </first_editor>
          <second_editor />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/tools/__init__.py">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/db.sqlite3">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-620" />
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/tools/tests.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="57">
          <caret line="3" lean-forward="true" selection-start-line="3" selection-end-line="3" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/tools/serializers.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="114">
          <caret line="6" column="15" selection-start-line="6" selection-start-column="15" selection-end-line="6" selection-end-column="15" />
          <folding>
            <element signature="e#0#25#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/venv/Lib/site-packages/rest_framework_swagger/__init__.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="19">
          <caret line="1" selection-start-line="1" selection-end-line="1" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/ingredients/models.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="190">
          <caret line="10" lean-forward="true" selection-start-line="10" selection-end-line="10" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/ingredients/admin.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="209">
          <caret line="11" column="49" lean-forward="true" selection-start-line="11" selection-start-column="49" selection-end-line="11" selection-end-column="49" />
          <folding>
            <element signature="e#0#32#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/ingredients/serializers.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="152">
          <caret line="8" lean-forward="true" selection-start-line="8" selection-end-line="8" />
          <folding>
            <element signature="e#0#25#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/ingredients/views.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="304">
          <caret line="16" lean-forward="true" selection-start-line="16" selection-end-line="16" />
          <folding>
            <element signature="e#0#35#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/ingredients/urls.py">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret selection-end-line="8" selection-end-column="1" />
          <folding>
            <element signature="e#0#28#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/tools/admin.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="57">
          <caret line="3" selection-start-line="3" selection-end-line="11" selection-end-column="38" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/venv/Lib/site-packages/django/db/models/fields/__init__.py">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/config/settings.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="19">
          <caret line="25" column="12" lean-forward="true" selection-start-line="25" selection-start-column="12" selection-end-line="25" selection-end-column="12" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/categories/admin.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="190">
          <caret line="10" lean-forward="true" selection-start-line="10" selection-end-line="10" />
          <folding>
            <element signature="e#0#32#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/tools/models.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="95">
          <caret line="5" column="26" lean-forward="true" selection-start-line="5" selection-start-column="26" selection-end-line="6" selection-end-column="29" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/tools/urls.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="152">
          <caret line="8" column="1" lean-forward="true" selection-end-line="8" selection-end-column="1" />
          <folding>
            <element signature="e#0#28#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/tools/views.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="57">
          <caret line="3" column="38" selection-start-line="3" selection-start-column="38" selection-end-line="3" selection-end-column="38" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/config/urls.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="437">
          <caret line="23" column="39" selection-start-line="23" selection-start-column="39" selection-end-line="23" selection-end-column="39" />
          <folding>
            <element signature="e#630#662#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/categories/urls.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="171">
          <caret line="9" column="1" lean-forward="true" selection-start-line="9" selection-start-column="1" selection-end-line="9" selection-end-column="1" />
          <folding>
            <element signature="e#0#28#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/categories/models.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="285">
          <caret line="15" selection-start-line="15" selection-end-line="15" />
          <folding>
            <element signature="e#0#28#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/categories/serializers.py">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <folding>
            <element signature="e#0#38#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/categories/views.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="342">
          <caret line="18" lean-forward="true" selection-start-line="18" selection-end-line="18" />
          <folding>
            <element signature="e#0#35#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
  </component>
</project>